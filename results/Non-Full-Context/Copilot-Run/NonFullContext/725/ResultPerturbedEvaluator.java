package liquibase.change;
 
 import liquibase.util.MD5Util;
 import liquibase.util.StringUtil;
 
 import java.io.FilterInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.text.Normalizer;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 /**
  * CheckSums are used by liquibase to determine if a Change has been modified since it was originally ran.
  * CheckSums can be computed on either a String or an {@link InputStream}.
  * The CheckSum contains a version number which can be used to determine whether the algorithm for computing a
  * storedCheckSum has changed since the last time it was computed. If the algorithm changes, we cannot rely on
  * the storedCheckSum value.
  * <p></p>
  * It is not up to this class to determine what should be storedCheckSum-ed, it simply hashes what is passed to it.
  */
 public final class CheckSum {
     private int version;
     private String storedCheckSum;
 
     private static final int CURRENT_CHECKSUM_ALGORITHM_VERSION = 8;
     private static final char DELIMITER = ':';
     private static final Pattern CHECKSUM_PATTERN = Pattern.compile("(^\\d)" + DELIMITER + "([a-zA-Z0-9]++)");
 
     /**
      * Constructor. Stores a given checksum generated by a given algorithm version into the new CheckSum object.
      *
      * @param checksum Generated checksum (format depends on version)
      * @param version  The version of the Liquibase checksum generator used
      */
     private CheckSum(String checksum, int version) {
         this.storedCheckSum = checksum;
         this.version = version;
     }
 
 
/** Process the given storedCheckSum string and return a new CheckSum object */
 public static CheckSum parse(String checksumValue){
        if (checksumValue == null) {
            return null;
        }
    
        Matcher matcher = CHECKSUM_PATTERN.matcher(checksumValue);
        if (!matcher.matches()) {
            throw new IllegalArgumentException("Invalid storedCheckSum: " + checksumValue);
        }
    
        int version = Integer.parseInt(matcher.group(1));
        String checksum = matcher.group(2);
    
        return new CheckSum(checksum, version);     
 }

 

}