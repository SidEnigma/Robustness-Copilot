/*
  * Copyright (c) 2015 John May <jwmay@users.sf.net>
  *
  * Contact: cdk-devel@lists.sourceforge.net
  *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms of the GNU Lesser General Public License as published by
  * the Free Software Foundation; either version 2.1 of the License, or (at
  * your option) any later version. All we ask is that proper credit is given
  * for our work, which includes - but is not limited to - adding the above
  * copyright notice to the beginning of your source code files, and to any
  * copyright notice that you may distribute with programs based on this work.
  *
  * This program is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
  * License for more details.
  *
  * You should have received a copy of the GNU Lesser General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 U
  */
 
 package org.openscience.cdk.depict;
 
 import org.openscience.cdk.renderer.RendererModel;
 import org.openscience.cdk.renderer.elements.Bounds;
 import org.openscience.cdk.renderer.elements.ElementGroup;
 import org.openscience.cdk.renderer.elements.GeneralPath;
 import org.openscience.cdk.renderer.elements.IRenderingElement;
 import org.openscience.cdk.renderer.elements.LineElement;
 import org.openscience.cdk.renderer.elements.MarkedElement;
 import org.openscience.cdk.renderer.elements.OvalElement;
 import org.openscience.cdk.renderer.elements.RectangleElement;
 import org.openscience.cdk.renderer.elements.TextElement;
 import org.openscience.cdk.renderer.elements.path.PathElement;
 import org.openscience.cdk.renderer.font.IFontManager;
 import org.openscience.cdk.renderer.generators.standard.StandardGenerator;
 import org.openscience.cdk.renderer.visitor.IDrawVisitor;
 
 import java.awt.Color;
 import java.awt.geom.AffineTransform;
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
 import java.text.NumberFormat;
 import java.util.ArrayDeque;
 import java.util.Collection;
 import java.util.Deque;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 
 /**
  * Internal - An SvgDrawVisitor, currently only certain elements are supported
  * but covers depictions generated by the {@link StandardGenerator}
  * (only {@link LineElement} and {@link GeneralPath}).
  * 
  * Usage:
  * <pre>{@link
  * SvgDrawVisitor visitor = new SvgDrawVisitor(50, 50)
  * visitor.visit(renderingElements);
  * String svg = visitor.toString();
  * }</pre>
  */
 final class SvgDrawVisitor implements IDrawVisitor {
 
     private final StringBuilder sb = new StringBuilder(5000);
 
     private int             indentLvl     = 0;
     private AffineTransform transform     = null;
     private RendererModel   model         = null;
     private NumberFormat    decimalFormat = new DecimalFormat(".##", new DecimalFormatSymbols(Locale.ROOT));
 
     private boolean defaultsWritten    = false;
     private Color   defaultStroke      = null;
     private Color   defaultFill        = null;
     private String  defaultStrokeWidth = null;
 
     /**
      * Create an SvgDrawVisitor with the specified width/height
      *
      * @param w width of canvas in 'units'
      * @param h height of canvas in 'units'
      * @param units 'px' or 'mm'
      */
     SvgDrawVisitor(double w, double h, String units) {
         writeHeader(w, h, units);
     }
 
     private void writeHeader(double w, double h, String units) {
         sb.append("<?xml version='1.0' encoding='UTF-8'?>\n")
           .append("<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n");
         sb.append("<svg")
           .append(" version='1.2'")
           .append(" xmlns='http://www.w3.org/2000/svg'")
           .append(" xmlns:xlink='http://www.w3.org/1999/xlink'")
           .append(" width='").append(toStr(w)).append(units).append('\'')
           .append(" height='").append(toStr(h)).append(units).append('\'')
           .append(" viewBox='0 0 ").append(toStr(w)).append(" ").append(toStr(h)).append("'")
           .append(">\n");
         indentLvl += 2;
         appendIdent();
         sb.append("<desc>Generated by the Chemistry Development Kit (http://github.com/cdk)</desc>\n");
     }
 
     private void appendIdent() {
         for (int i = 0; i < indentLvl; i++)
             sb.append(' ');
     }
 
     private double scaled(double num) {
         if (transform == null)
             return num;
         // presumed uniform x/y scaling
         return transform.getScaleX() * num;
     }
 
     private void transform(double[] points, int numPoints) {
         if (transform != null)
             transform.transform(points, 0, points, 0, numPoints);
     }
 
     private String toStr(double num) {
         return decimalFormat.format(num);
     }
 
     private void appendPoints(StringBuilder sb, double[] points, int numPoints) {
         switch (numPoints) {
             case 1:
                 sb.append(decimalFormat.format(points[0]));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[1]));
                 break;
             case 2:
                 sb.append(decimalFormat.format(points[0]));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[1]));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[2]));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[3]));
                 break;
             case 3:
                 sb.append(decimalFormat.format(points[0]));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[1]));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[2]));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[3]));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[4]));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[5]));
                 break;
             default:
                 throw new IllegalArgumentException();
         }
     }
 
     private void appendRelativePoints(StringBuilder sb, double[] points, double xBase, double yBase, int numPoints) {
         switch (numPoints) {
             case 1:
                 sb.append(decimalFormat.format(points[0] - xBase));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[1] - yBase));
                 break;
             case 2:
                 sb.append(decimalFormat.format(points[0] - xBase));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[1] - yBase));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[2] - xBase));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[3] - yBase));
                 break;
             case 3:
                 sb.append(decimalFormat.format(points[0] - xBase));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[1] - yBase));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[2] - xBase));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[3] - yBase));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[4] - xBase));
                 sb.append(' ');
                 sb.append(decimalFormat.format(points[5] - yBase));
                 break;
             default:
                 throw new IllegalArgumentException();
         }
     }
 
     String toStr(Color col) {
         if (col.getAlpha() == 255) {
             return String.format("#%06X", (0xFFFFFF & col.getRGB()));
         } else {
             return String.format("rgba(%d,%d,%d,%.2f)", col.getRed(), col.getGreen(), col.getBlue(), col.getAlpha()/255d);
         }
     }
 
     @Override
     public void setFontManager(IFontManager fontManager) {
         // ignored
     }
 
     @Override
     public void setRendererModel(RendererModel model) {
         this.model = model;
     }
 
 
/** The pre-visit allows us to prepare the visitor for a more optimal performance. */
 public void previsit(Collection<? extends IRenderingElement> elements){
        // ignored      
 }

 

}